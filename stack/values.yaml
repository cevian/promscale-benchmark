# NOTE: To apply configuration, use `values-override.yaml` instead of this file.
# By doing so you can easily apply your customization changes even after
# `main` branch is updated. This in turn allows for easier `git rebase` operation.

timescaledb-single:
  enabled: true
  replicaCount: 1
  image:
    #repository: antekresic/timescaledb-ha
    repository: cevian/timescaledb-ha
    #tag: pg14-ts-rel-2.9.0-fix
    tag: ts2.9-prom3531b7
  backup:
    enabled: false
  persistentVolumes:
    data:
      size: 1000Gi
      storageClass: gp3
    wal:
      size: 200Gi
      storageClass: gp3
  prometheus:
    args:
      - --no-collector.database
  patroni:
    bootstrap:
      dcs:
        postgresql:
          parameters:
            checkpoint_timeout: 15min
            shared_buffers: 30GB
            wal_compression: on
            bgwriter_flush_after: 0
            bgwriter_delay: 200
            bgwriter_lru_maxpages: 100
            bgwriter_lru_multiplier: 2
            stats_temp_directory: /dev/shm/pg_stat_temp
            max_wal_size: 150GB
            #maintenance_work_mem: 500MB
            autovacuum_max_workers: 1
            #synchronous_commit: off
            timescaledb.telemetry_level: "off"
  resources:
    requests:
      cpu: "15"
      memory: 50Gi
  tolerations:
  - key: "database"
    operator: "Exists"
    effect: "NoSchedule"
  affinityTemplate: |
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - connector
          topologyKey: "kubernetes.io/hostname"
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: topology.timescale.com/zone
            operator: In
            values:
            - database

promscale:
  enabled: true
  # If you want to use a different image, you can do so here.
  image:
    repository: cevian/promscale
    tag: master-753ae
    pullPolicy: Always
  extraArgs:
    - "--metrics.high-availability=false"
    - "--startup.upgrade-prerelease-extensions=true"
    - "--metrics.cache.series.initial-size=15000000"
  extraEnv:
    - name: PROMSCALE_TELEMETRY_TRACE_JAEGER_ENDPOINT
      value: http://jaeger-collector.tracing.svc.cluster.local:14268/api/traces
  connectionSecretName: "tobs-promscale-connection"
  resources:
    requests:
      memory: 16Gi
      cpu: "4"
  config:
    # Use 1hr chunk interval for benchmarking. For details https://github.com/timescale/promscale/issues/1736
    startup.dataset.config: |
      metrics:
        default_chunk_interval: 30m
  tolerations:
  - key: "connector"
    operator: "Exists"
    effect: "NoSchedule"
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - timescaledb
          topologyKey: "kubernetes.io/hostname"
    nodeAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        preference:
          matchExpressions:
          - key: topology.timescale.com/zone
            operator: In
            values:
            - connector

kube-prometheus-stack:
  enabled: true
  defaultRules:
    rules:
      etcd: false
      kubeControllerManager: false
      kubeProxy: false
      kubeScheduler: false
  kubeControllerManager:
    enabled: false
  kubeProxy:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeEtcd:
    enabled: false
  alertmanager:
    enabled: false
  prometheusOperator:
    tls:
      enabled: false
    admissionWebhooks:
      enabled: false
  # This prometheus is monitoring the cluster. Do not use it for load generation.
  prometheus:
    prometheusSpec:
      remoteWriteDashboards: true
      remoteRead: []
      remoteWrite: []
      retention: 30d
      replicas: 1
      additionalScrapeConfigsSecret:
        enabled: false
      ruleNamespaceSelector: {}
      serviceMonitorNamespaceSelector: {}
      podMonitorNamespaceSelector: {}
      probeNamespaceSelector: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - timescaledb
              topologyKey: "kubernetes.io/hostname"
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/component
                  operator: In
                  values:
                  - connector
              topologyKey: "kubernetes.io/hostname"
  grafana:
    enabled: true
    service:
      type: LoadBalancer
    env:
      GF_AUTH_ANONYMOUS_ENABLED: true
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Editor"
    envValueFrom:
      GRAFANA_PASSWORD:
    prometheus:
      datasource:
        enabled: true
        url: "http://{{ .Release.Name }}-kube-prometheus-stack-prometheus.{{ .Release.Namespace }}.svc:9090"
    timescale:
      datasource:
        enabled: false
opentelemetry-operator:
  enabled: false
